h2. Intro

A GeoVector can be any of:

1) *bearing vector* - bearing (direction in degrees) and a distance
2) *direction vector* - direction (:N, :NW, :NE, :S, :SE, :SW, :E, :W) and a distance
3) *point vector* - number of degrees due east/west (+ or -) and a distance due north/south (+ or -)

Note that a direction vector is always converted to a bearing vector when added to a point

A GeoVector can be applied to a GeoPoint (see geo_calc) or to another GeoVector.
When multiple vectors are added together, the sum becomes a GeoVectors object.
If a GeoVectors object is applied, the vectors are simply applied in turn.

h2. Quick start (Usage guide)

The following gives a quick overview for how to use the GeoVector API.

_Note: This is suggested functionality._

I plan to use my recently published _geo_calc_ gem as the base for the functionality described here.
I need a major cleanup up of the current code...

h3. Addition

Vectors can be added to form a new Vector, using the simple formula vec = v1 + v2 = (v1.x + v2.y, v1.x + v2.y)

h3. Vector on Vector addition

If both vectors are point vectors, the result is simply a new point vector

<pre>
  v1 = [1, 3].vector
  v2 = [-2, 2].vector
  vec = v1 + v2
  vec.unit.should == :degrees
  vec.lat.should == -1
  vec.lng.should == 5

  # alternative addition operators
  vec = v1 << v2  
</pre>  

h3. Vector subtraction

<pre>
  v1 = [1, 3].vector
  v2 = [2, 1].vector
  vec = v1 - v2 # here v2 inversed (scaled by -1) and then added 
  vec.lat.should == -1
  vec.lng.should == 2
</pre>

h3. Vector scaling

<pre>
  v1 = [1, 3].vector
  vec = v1 * 2
  vec.lat.should == 2
  vec.lng.should == 6
</pre>

Scale a bearing vector

<pre>
  v1 = [32, 3.km].vector
  vec = v1 * 2
  vec.bearing.should == 32
  vec.distance.should == 6.km
</pre>


Using division operator / for inverse scaling

<pre>
  v1 = [4, 2].vector
  vec = v1 / 2
  vec.lat.should == 2
  vec.lng.should == 1
</pre>

h3. GeoVectors 

Adding a point Vector to a bearing Vector

If the vectors are of different type, a GeoVectors object is created 
containing both vectors. A GeoVectors is a composite vector.

<pre>
  p1 = [1, -1]

  v1 = [1, 3].vector # point Vector

  # 32 deg bearing, 2.km
  v2 = [32, 2.km].vector # bearing Vector
  v2.bearing.should == 32
  v2.distance.should == 2.km

  vec = v1 + v2 # create a GeoVectors object
  vec.should be_a(GeoVectors)
  vec.vectors.size.should == 2 # should contain 2 vectors

  # Adding more vectors to the GeoVectors object
  vec.vectors << v3
  vec << v4
  
  p2 = p1 + vec # Add GeoVectors to the point
</pre>

h3. Vector on Point addition

Add a point Vector to a GeoPoint

<pre>
  p1 = [1, 3].geo_point
  vec = [-2, 2].vector
  p2 = p1 + vec
  p2.lat.should == -1
  p2.lng.should == 5  
</pre>

Add an inverse point Vector (subtract) to a GeoPoint

<pre>
  p1 = [1, 3].geo_point
  vec = [2, 1].vector
  p2 = p1 - vec
  p2.lat.should == -1
  p2.lng.should == 2
</pre>

Add a bearing Vector to a GeoPoint

<pre>
  p1 = [1, 3].geo_point

  # 32 deg bearing, 2.km
  vec = [32, 2.km].vector 

  # use #destination_point from 'geo_calc' project
  p2 = p1 + vec
</pre>
